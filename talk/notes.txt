# Asynchronous Programming in iOS







# Restaurant Review App





# With just one thread





# Threading primitives



.notes With multiple threads, everything becomes unpredictable: "maybe", "could", etc.
.notes Each thread can have its own copy of memory values: memory visibility
.notes So even after thread A writes something, thread B may not see it.
.notes We control this with memory boundaries, formed by locks and other things.

.notes What are each of the above things?

.notes Error-prone
.notes Can result in *slow* code, because too many locks.
.notes Can have deadlocks.




# Deadlock




.notes People spend lots of effort to avoid threads.
.notes Python and Ruby have a GIL, so really there is no parallelism.
.notes Javascript is single-threaded.
.notes Node.js early-on billed async callbacks as easier to learn than threads.
.notes Systems languages need real multi-threading, but they try to provider higher-level abstractions.
.notes Java has an amazing java.util.concurrent.* package.
.notes Objective-C has some things too.




# Higher-Level Alternatives






# Rules





# Our Restaurant App









# With a timer




.notes Timers fire on a given run loop.
.notes scheduledTimerWithTimeInterval:target:selector:userInfo:repeats: will fire the timer on the same run loop that you're on now.
.notes So far everything is just one thread.
.notes The timer's callback is just like any other event, e.g. a touch event.
.notes Even Javascript has timers.




# Sync HTTP Request




.notes This will block your app
.notes Don't do it!




# Async HTTP Request



.notes No blocking your app
.notes NSOperationQueue holds a list of TODO items, will process serially.
.notes Each TODO item is an NSOperation, which you can subclass
.notes You can define dependencies between NSOperations.
.notes NSURLConnection handles the internals for us
.notes Our callback runs on the main thread b/c we asked for the main operation queue.

.notes Everyone okay with blocks? Javascript callbacks, C pointers-to-function, Ruby blocks, C# delegates/lambda expressions, Python lambdas
.notes Blocks form closures: they can hold onto outside values in their lexical scope (e.g. the self above).




# Parsing the JSON



.notes Here is the code to parse the JSON, just in case you're interested.
.notes Pretty easy, even with no libraries!
.notes NSJSONSerialization requires iOS 5+
.notes What if we want to parse on a background thread also?




# Async parsing with NSOperation







.notes This is the heavy way to do it: define a subclass, add it to the queue.
.notes Also the most flexible.
.notes Now we'll launch this operation on a background queue:



# Async parsing with NSOperationQueue


.notes Here we are creating a new queue and adding our operation.
.notes Probably we should create the queue once on initialization, not every time.
.notes Now let's look at how we handle the notification.




# Getting an NSNotification from our queue.




.notes We receive notifications on the same run loop they were posted on.
.notes So we need to "trampoline" to the main run loop.
.notes We use performSelectorOnMainThread for trampolining.

.notes Technically we should also make sure we unregister ourselves from the notification, because NSNotificationCenter only gets a weak reference to us.
.notes But there are easier ways to do all this!




# setCompletionBlock to avoid notifications



.notes No need for notifications.
.notes The block is called on an unspecified thread, not the main thread.
.notes Still need to trampoline to the main queue to update state and UI.
.notes Oops, a retain cycle!





# Retain Cycles


.notes Retain cycles are the bane of reference-counting memory management.
.notes Object A retains B and B retains A, so neither is ever deallocated.




# Blocks and retain cycles







.notes To know if a block is copied, check the docs.
.notes XCode might warn you, but it isn't always right.




# setCompletionBlock copies the block





# setCompletionBlock without memory leak: "weak-strong dance"





.notes This is called the "weak-strong dance", recommended by Apple at WWDC.
.notes We close on the weak reference.
.notes We give ourselves a strong reference so the object doesn't disappear early.
.notes Because we aren't *closing* over strongOp, when it goes out of scope it gets released.

.notes But there is an even cleaner way to do it!




# Block as NSOperation



.notes No need to subclass NSOperation.
.notes Everything is in one place: more readable.
.notes But that block is no longer reusable, not testable: tradeoff.
.notes But now there's no place to call setCompletionBlock, so back to trampolining.




# Do the NSURLConnection callback on a different queue



.notes Note q is no longer the main queue.
.notes Again, no need for separate NSOperation subclass.
.notes Really simple!
.notes Still a hassle to get back onto main thread.




# Async parsing with GCD





.notes Technically GCD is lower-level than NSOperation.
.notes It makes it easy to do everything in blocks, with no NSOperation subclass.




# Async parsing with GCD





.notes Everything is right here: the JSON parsing, the state & UI update.
.notes WWDC 2011 videos mention dispatch_retain/dispatch_release; no need for that with ARC in iOS6+.




# References and Further Reading






# Thanks!



